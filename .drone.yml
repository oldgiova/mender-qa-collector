---

kind: pipeline
type: docker
name: main

platform:
  os: linux
  arch: amd64

steps:

  - name: cluster_setup
    image: toolbox:local
    user: root
    commands:
      - ./ci/mender-os-setup.sh cluster

  - name: certmanager_setup
    image: toolbox:local
    user: root
    commands:
      - ./ci/mender-os-setup.sh certmanager
    depends_on:
      - cluster_setup

  - name: minio_setup
    image: toolbox:local
    user: root
    commands:
      - ./ci/mender-os-setup.sh minio
    depends_on:
      - cluster_setup

  - name: mender_setup
    image: toolbox:local
    user: root
    commands:
      - ./ci/mender-os-setup.sh mender
    depends_on:
      - cluster_setup
      - certmanager_setup
      - minio_setup

  - name: test
    image: mendersoftware/mender-test-containers:backend-integration-testing
    #image: docker:dind
    #commands:
    #  - sleep 5
    #  - apk add bash
    #  - ./ci/mender-backend-integration-tests.sh
    #  - tail -f /dev/null
    commands:
      - ./ci/mender-backend-integration-tests.sh
    depends_on:
      - mender_setup
        #volumes:
        #  - name: dockersock
        #    path: /var/run

services:
  #- name: k3dsvc
  - name: dind
    image: docker:dind
    privileged: true    
    volumes:
    - name: dockersock
      path: /var/run
    commands:
      #- source ./.build_info 
      - k3s/entrypoint-cgroup2.sh # workaround cggroup2 issue: https://github.com/k3d-io/k3d/blob/main/pkg/types/fixes/assets/k3d-entrypoint-cgroupv2.sh
        #- k3s server c --write-kubeconfig /drone/src/$${BUILDDIR}/kubeconfig-$${DRONE_BUILD_STARTED}.yaml &
        #- nohup k3s server &
        #- until ls /etc/rancher/k3s/k3s.yaml; do sleep 2s; done
        #- sed 's/127.0.0.1/mendercluster/g' /etc/rancher/k3s/k3s.yaml > /drone/src/$${BUILDDIR}/kubeconfig-$${DRONE_BUILD_STARTED}.yaml
        #- k3s server &
      #      - k3s server & # start k3s
      #      - ls -la
      #      - source ./.build_info
      #        #  - docker ps
      #        #  - docker version
      #      #- nohup dockerd-entrypoint.sh & # start docker in the background
      #        #- until docker ps 2>&1 > /dev/null; do sleep 1s; done # wait for docker to be ready before proceeding
      #        #- k3d cluster create --config ci/k3d-drone.yaml --api-port k3dsvc:6445 # create k3d cluster from config file
      #      - until kubectl get deployment coredns -n kube-system -o go-template='{{.status.availableReplicas}}' | grep -v -e '<no value>'; do sleep 1s; done # wait for coredns to be up and running
      #      - cp /etc/rancher/k3s/k3s.yaml $${BUILDDIR}/kubeconfig-$${DRONE_BUILD_STARTED}.yaml
      #- chmod 600 /drone/src/$${BUILDDIR}/kubeconfig-$${DRONE_BUILD_STARTED}.yaml
      #        #- echo "BUILDDIR = $${BUILDDIR}"
      #        #  #- k3d kubeconfig get drone > $${BUILDDIR}/kubeconfig-$${DRONE_BUILD_STARTED}.yaml
      #        #- cp /etc/rancher/k3s/k3s.yaml $${BUILDDIR}/kubeconfig-$${DRONE_BUILD_STARTED}.yaml
      #        #- chmod 600 $${BUILDDIR}/kubeconfig-$${DRONE_BUILD_STARTED}.yaml
      - tail -f /dev/null # chill around while the steps do their work

volumes:
  - name: dockersock
    temp: {}

